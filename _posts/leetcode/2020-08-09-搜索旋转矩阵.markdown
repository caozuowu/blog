---
layout: post
author: zuowu
date:   2020-08-09 15:10:00 +0800
linkname: 搜索旋转矩阵
categories: 
  - leetcode
---

假设按照升序排序的数组在预先未知的某个点上进行了旋转。    
( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。    
搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。    
你可以假设数组中不存在重复的元素。    
你的算法时间复杂度必须是 O(log n) 级别。    

示例:

```
输入: nums = [4,5,6,7,0,1,2], target = 0
输出: 4

输入: nums = [4,5,6,7,0,1,2], target = 3
输出: -1
```

普通二分查找

```javascript
var search = function(array, target) {
    var left = 0;
    var right = array.length-1
    while (left <= right) {
        var middle = Math.floor((right+left)/2)
        if (array[middle] == target) {
            return middle
        }else if (array[middle] > target) {
            right = middle-1
        }else {
            left = middle+1
        }
    }
    return -1;
}

var result = search([1,2,3,4,5,6,7,8,9], 9)
console.log(result)
```

我们将数组从中间分开成左右两部分的时候，一定有一部分的数组是有序的    
这启示我们可以在常规二分搜索的时候查看当前 mid 为分割位置分割出来的两个部分 [l, mid] 和 [mid + 1, r] 哪个部分是有序的，并根据有序的那个部分确定我们该如何改变二分搜索的上下界，因为我们能够根据有序的那部分判断出 target 在不在这个部分    
实际上是两部操作    
 * 每一次迭代如果不是有序数组 则把数组分成平均两个部分
 * 然后在有序数组中看看target在不在里面
    * 如果在里面，则进行二分查找
    * 如果不在里面，则到另一半无序数组中在分成两部分重复开始步骤

```javascript
var search = function(nums, target) {

    if (!nums || nums.length == 0) {
        return -1;
    }
    if (nums.length == 1) {
        return target == nums[0] ? 0 : -1;
    }

    var left = 0
    var right = nums.length-1

    while (left <= right) {
        var middle = Math.floor((left+right)/2);
        if (nums[middle] == target) {
            return middle;
        }
        if (nums[0] <= nums[middle]) {
            if (nums[0] <= target && target < nums[middle]) {
                right = middle - 1;
            }else {
                left = middle + 1;
            }
        }else {
            if (nums[middle] < target && target <= nums[nums.length-1]) {
                left = middle + 1
            }else {
                right = middle - 1;
            }
        }
    }

    return -1;
}

var result = search([4,5,6,7,0,1,2], 0)
console.log(result)
```

---
layout: post
author: zuowu
date:   2020-08-12 16:43:00 +0800
linkname: 单词搜索
categories: 
  - leetcode
---


给定一个二维网格和一个单词，找出该单词是否存在于网格中。    
单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。



示例：
```
board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]

给定 word = "ABCCED", 返回 true
给定 word = "SEE", 返回 true
给定 word = "ABCB", 返回 false

```

深度优先搜索    

```javascript

var board = [
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]

var word = 'ABCD';

var M = function(array, word) {

    this.arr = array
    this.row = array.length
    this.colum = array[0].length
    this.mark = []
    this.word = word

    for (var row of array) {
        this.mark.push(new Array(row.length).fill(false))
    }

    this.next = function(i, j) {
        var output = []
        var arr = [[i+1,j],[i-1,j],[i,j+1],[i,j-1]];
        for (var item of arr) {
            if (item[0] >= 0 && item[0] < this.row && item[1] >= 0 && item[1] < this.colum ) {
                if (this.mark[item[0]][item[1]] == false) {
                    output.push(item)
                }
            }
        }
        return output
    }

    this.deepSearch = function(i, j, index) {

        if (index == this.word.length - 1) {
            return this.arr[i][j] == this.word[index];
        }

        if (this.arr[i][j] == this.word[index]) {
            this.mark[i][j] = true;
            for (var item of this.next(i,j)) {
                if (this.deepSearch(item[0], item[1], index+1)){
                    return true;
                }
            }
            this.mark[i][j] = false;
        }
        return false;   
    }

    this.exist = function() {
        for (var i = 0; i < this.row; i++) {
            for (var j = 0; j < this.colum; j++) {
                if (this.deepSearch(i,j,0)) {
                    return true
                }
            }
        }
        return false;
    }

}


```
---
layout: post
author: zuowu
date:   2020-08-12 15:50:00 +0800
linkname: 不同路径
categories: 
  - leetcode
---

### 不同路径 I

一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。    
机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。    
问总共有多少条不同的路径？


示例：
```
输入: m = 3, n = 2
输出: 3

输入: m = 7, n = 3
输出: 28

```

动态规划    
我们令 dp[i][j] 是到达 i, j 最多路径    
动态方程：dp[i][j] = dp[i-1][j] + dp[i][j-1]    
注意，对于第一行 dp[0][j]，或者第一列 dp[i][0]，由于都是在边界，所以只能为 1    


```javascript

var uniquePaths = function(m, n) {

    var mark = [];
    for (var i = 0; i < n; i++) {
        mark.push(new Array(m).fill(0))
    }

    for (var i = 0; i < n; i++) {
        mark[i][0] = 1;
    }

    for (var i = 0; i < m; i++) {
        mark[0][i] = 1;
    }

    for (var i = 1; i < n; i++) {
        for (var j = 1; j < m; j++) {
            mark[i][j] = mark[i-1][j] + mark[i][j-1]
        }
    }

    console.log(mark)
    return mark[n-1][m-1]

};


uniquePaths(7, 3)
```

### 不同路径 II

如果中间有障碍物
```java
public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int n=obstacleGrid.length;//行
        int m=obstacleGrid[0].length;//列

        for(int i=0;i<n;i++){
            for(int  j=0;j<m;j++){
                if(i==0&&j==0){
                    obstacleGrid[i][j]=(obstacleGrid[i][j]==0?1:0);
                }
                else if(obstacleGrid[i][j]==1){
                    obstacleGrid[i][j]=0;
                }else{
                    obstacleGrid[i][j]=(i>0?obstacleGrid[i-1][j]:0)+(j>0?obstacleGrid[i][j-1]:0);
                }
            }
        }
        return obstacleGrid[n-1][m-1];
    }
```


### 最小路径和

给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。    
说明：每次只能向下或者向右移动一步。     

示例:
```
输入:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
输出: 7
解释: 因为路径 1→3→1→1→1 的总和最小。
```

动态规划
```javascript
grid = [
    [1,3,1],
    [1,5,1],
    [4,2,1]
]

var minPathSum = function(grid) {
    
    var row = grid.length;
    var colum = grid[0].length;

    var mark = []
    for (var i = 0; i < row; i++){
        mark.push(new Array(colum))
    }

    for (var i = 0; i < row; i++) {
        for (var j = 0; j < colum; j++) {
            if (i == 0 && j == 0) {
                mark[i][j] = grid[i][j]
            }else if (i == 0) {
                mark[i][j] = grid[i][j] + mark[i][j-1]
            }else if (j == 0) {
                mark[i][j] = grid[i][j] + mark[i-1][j]
            }else {
                mark[i][j] = Math.min(mark[i][j-1], mark[i-1][j]) + grid[i][j]
            }
        }
    }

    console.log(mark)
    return mark[row-1][colum-1]
};

minPathSum(grid)
```

